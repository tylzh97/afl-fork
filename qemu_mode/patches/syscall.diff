*** qemu-2.12.1-clean/linux-user/syscall.c	2018-08-02 16:48:53.000000000 -0500
--- qemu-2.12.1/linux-user/syscall.c	2019-10-26 21:28:55.618582602 -0500
***************
*** 34,39 ****
--- 34,40 ----
  #include <sys/resource.h>
  #include <sys/swap.h>
  #include <linux/capability.h>
+ #include <linux/sockios.h> // https://lkml.org/lkml/2019/6/3/988
  #include <sched.h>
  #include <sys/timex.h>
  #include <sys/socket.h>
***************
*** 112,117 ****
--- 113,120 ----
  
  #include "qemu.h"
  
+ extern unsigned int afl_forksrv_pid;
+ 
  #ifndef CLONE_IO
  #define CLONE_IO                0x80000000      /* Clone io context */
  #endif
***************
*** 251,257 ****
  #endif
  
  #ifdef __NR_gettid
! _syscall0(int, gettid)
  #else
  /* This is a replacement for the host gettid() and must return a host
     errno. */
--- 254,262 ----
  #endif
  
  #ifdef __NR_gettid
! // taken from https://patchwork.kernel.org/patch/10862231/
! #define __NR_sys_gettid __NR_gettid
! _syscall0(int, sys_gettid)
  #else
  /* This is a replacement for the host gettid() and must return a host
     errno. */
***************
*** 6312,6318 ****
      cpu = ENV_GET_CPU(env);
      thread_cpu = cpu;
      ts = (TaskState *)cpu->opaque;
!     info->tid = gettid();
      task_settid(ts);
      if (info->child_tidptr)
          put_user_u32(info->tid, info->child_tidptr);
--- 6317,6324 ----
      cpu = ENV_GET_CPU(env);
      thread_cpu = cpu;
      ts = (TaskState *)cpu->opaque;
!     // taken from https://patchwork.kernel.org/patch/10862231/
!     info->tid = sys_gettid();
      task_settid(ts);
      if (info->child_tidptr)
          put_user_u32(info->tid, info->child_tidptr);
***************
*** 6456,6465 ****
                 (not implemented) or having *_tidptr to point at a shared memory
                 mapping.  We can't repeat the spinlock hack used above because
                 the child process gets its own copy of the lock.  */
!             if (flags & CLONE_CHILD_SETTID)
!                 put_user_u32(gettid(), child_tidptr);
!             if (flags & CLONE_PARENT_SETTID)
!                 put_user_u32(gettid(), parent_tidptr);
              ts = (TaskState *)cpu->opaque;
              if (flags & CLONE_SETTLS)
                  cpu_set_tls (env, newtls);
--- 6462,6475 ----
                 (not implemented) or having *_tidptr to point at a shared memory
                 mapping.  We can't repeat the spinlock hack used above because
                 the child process gets its own copy of the lock.  */
!             if (flags & CLONE_CHILD_SETTID) {
!                 // taken from https://patchwork.kernel.org/patch/10862231/
!                 put_user_u32(sys_gettid(), child_tidptr);
!             }
!             if (flags & CLONE_PARENT_SETTID) {
!                 // taken from https://patchwork.kernel.org/patch/10862231/
!                 put_user_u32(sys_gettid(), parent_tidptr);
!             }
              ts = (TaskState *)cpu->opaque;
              if (flags & CLONE_SETTLS)
                  cpu_set_tls (env, newtls);
***************
*** 11672,11678 ****
          break;
  #endif
      case TARGET_NR_gettid:
!         ret = get_errno(gettid());
          break;
  #ifdef TARGET_NR_readahead
      case TARGET_NR_readahead:
--- 11682,11689 ----
          break;
  #endif
      case TARGET_NR_gettid:
!         // taken from https://patchwork.kernel.org/patch/10862231/
!         ret = get_errno(sys_gettid());
          break;
  #ifdef TARGET_NR_readahead
      case TARGET_NR_readahead: